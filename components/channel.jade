dom-module#maki-channel
  template
    maki-channel-status#indicator
  script(src="/js/uuid.js", async)
  script(src="/js/jsonrpc.js", async)
  script.
    Polymer({
      is: 'maki-channel',
      properties: {
        namespace: { 
          type: String
        },
        autoconnect: {
          type: Boolean
        },
        reconnect: {
          type: Boolean
        },
        subscriptions: {
          type: Array
        },
        ws: {
          type: Object
        },
        src: {
          type: String
        },
      },
      _send: function(method, params) {
        var self = this;
        self.ws.send(JSON.stringify({
          'jsonrpc': '2.0',
          'method': method,
          'params': params,
          'id': uuid.v4() // TODO: sequence?
        }));
      },
      _subscribe: function(path) {
        console.log('[MAKI:CHANNEL]', 'subscribing to:', path);
        var self = this;
        self._send('subscribe', {
          channel: path
        });
      },
      _consume: function() {
        var self = this;
        var elements = document.querySelectorAll('[src]');
        
        console.log('[MAKI:CHANNEL]', '_consume', elements);
        
        for (var i = 0; i < elements.length; i++) {
          var element = elements[i];
          self._subscribe(element.src);
        }
      },
      _handleMessage: function(msg) {
        var self = this;
        console.log('[MAKI:CHANNEL]', '_handleMessage', msg);
        
        try {
          var data = JSON.parse( msg.data );
        } catch (e) {
          var data = {};
        }
        
        console.log('[MAKI:CHANNEL]', '_handleMessage', 'resulting data:', data);
        
        // experimental JSON-RPC implementation
        if (data.jsonrpc === '2.0') {
          console.log('[MAKI:CHANNEL]', '_handleMessage', 'valid jsonrpc!');
          
          switch (data.method) {
            case 'ping':
              console.log('[MAKI:CHANNEL]', 'received ping.  playing pong...');
              self.ws.send(JSON.stringify({
                'jsonrpc': '2.0',
                'result': 'pong',
                'id': data.id
              }));
            break;
            case 'patch':
              // TODO: update in-memory data (two-way binding);
              console.log('[MAKI:CHANNEL]', 'received `patch` event:', data.params.channel , data );
              var channel = data.params.channel;
              var ops = data.params.ops;
              var datastore = document.querySelector('maki-datastore[name='+self.namespace+']');
              var manager = document.querySelector('maki-peer-manager');

              datastore._patch(channel, ops);
              manager._relay(data);

            break;
            default:
              console.error('[MAKI:CHANNEL]', 'unhandled jsonrpc method ' , data.method);
            break;
          }
        } else {

        }
      },
      _connect: function() {
        var self = this;
        var maki = document.querySelector('maki-application');
        var protocol = (document.location.protocol === 'http:') ? 'ws://' : 'wss://';
        var path = protocol + document.location.host; // + self.src;
        
        console.log('[MAKI:CHANNEL]', 'websocket connecting to: ', path);
        self.$.indicator.status = 'connecting...';
        
        self.ws = new WebSocket(path);
        self.ws.onclose = function onClose() {
          self.$.indicator.status = 'disconnected';
          if (self.reconnect === true) {
            setTimeout(function() {
              self._connect();
            }, 500);
          }
        }
        self.ws.onmessage = self._handleMessage.bind(self);
        self.ws.onopen = function onOpen() {
          self.$.indicator.status = 'connected';
          console.log('[MAKI:CHANNEL]', 'websocket open.');
        }
      },
      ready: function() {
        var self = this;
        console.log('[MAKI:CHANNEL]', 'ready');
        self.$.indicator.status = 'ready';
        if (self.autoconnect === true) {
          self._connect();
        }
      },
    });
